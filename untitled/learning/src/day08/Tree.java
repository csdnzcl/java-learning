package day08;

public class Tree {

}

/*
BinaryTree：
二叉搜索树：1. 节点的左子树小于该节点，右子树大于该节点   2. 左子树和右子树都是二叉搜索树
平衡二叉树： 1. 节点的左右子树的高度差不能超过1   2. 左子树和右子树都是平衡二叉树
（后续讨论的平衡二叉树是二叉搜索树）
左旋：
    1. 确定支点：从添加的节点开始，不断往父节点找不平衡的结点
    2. 以不平衡的点为支点，把支点左旋降级为左子结点，晋升原来的右子节点
    3. 原来右子节点的左子树为支点的右子树
右旋：类比左旋

四种情况：
    1. 左左：一次右旋
    2. 右右：一次左旋
    3. 左右：先局部左旋（左右-->>左左），再整体右旋
    4. 右左：先局部右旋，再整体左旋
 */

/*
红黑树：  自平衡  的二叉  查找树，
    特殊的二叉查找树，
    每一个节点上都有存储位表示结点的颜色，每个节点上存储颜色，颜色有：红色、黑色
    不会高度平衡的（平衡二叉树），平衡通过“红黑规则”实现

红黑规则：
1. 每个节点是红色或者黑色
2. 根节点是黑色
3. 每个叶子节点（NIL）是黑色
4. 红色节点不相连
5. 从任意一个节点到其每个叶子节点的所有路径都包含相同数目的黑色节点

添加节点规则：( OOTO ）
    1. 新添加的节点默认为红色
    2. 添加节点为根节点---黑色
    ………………………………
 */